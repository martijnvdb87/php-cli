#!/usr/bin/env php
<?php

if (php_sapi_name() !== 'cli') exit;

require __DIR__ . '/../vendor/autoload.php';

use Martijnvdb\PhpCli\Cli;
use Martijnvdb\PhpCli\Input;
use Martijnvdb\PhpCli\Progress;

$cli = new Cli('First CLI App', '0.1.0');

$cli->add(function ($options, $output) use ($cli) {
    if ($options->get('-h', '--help')) {
        return $output->version()
            ->columns('Usage:', [
                ['command [options] [arguments]']
            ])
            ->columns('Options:', [
                ['-h, --help', 'Display this help message'],
                ['-v, --version', 'Display this application version']
            ], ['green'])
            ->columns('Commands:', [
                ['uuid', 'Generate UUIDs (v4)'],
                ['pokemon', 'Generate random Pokémon names'],
                ['progress', 'Progress bar demo'],
            ], ['green']);
    }

    if ($options->get('-v', '--version')) {
        return $output->version();
    }

    $value = Input::choice('[yellow]Select an option[/yellow] [green](1/2/3/4/5)[/green]:', [
        "1" => 'Generate UUIDs',
        "2" => 'Generate random Pokémon names',
        "3" => 'Progress bar demo',
        "4" => 'Show help',
        "5" => 'Show application version'
    ])->setDefault(1)->get();

    if ($value === "1") {
        $cli->forceRun('uuid');
    } else if ($value === "2") {
        $cli->forceRun('pokemon');
    } else if ($value === "3") {
        $cli->forceRun('progress');
    } else if ($value === "4") {
        $cli->forceRun('__DEFAULT__', ['-h' => true]);
    } else if ($value === "5") {
        $cli->forceRun('__DEFAULT__', ['-v' => true]);
    }
})

    ->add('uuid', function ($options, $output) {
        if ($options->get('-h', '--help')) {
            return $output->columns('Description:', [
                ['Generate UUIDs (v4)']
            ])
                ->columns('Usage:', [
                    ['uuid [options] [arguments]']
                ])
                ->columns('Options:', [
                    ['-a, --amount', 'The amount of UUIDs that will be generated']
                ], ['green']);
        }

        $amount = $options->get('-a', '--amount');

        $amount = !empty($amount) ? $amount : Input::number('[yellow]How many UUIDs (v4) should be generated?[/yellow] [green](default: 10)[/green]:')->setDefault(10)->get();

        for ($i = 0; $i < $amount; $i++) {
            $uuid = vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex(random_bytes(16)), 4));
            $output->line($uuid);
        }
    })

    ->add('pokemon', function ($options, $output) {
        if ($options->get('-h', '--help')) {
            return $output->columns('Description:', [
                ['Generate random Pokémon names']
            ])
                ->columns('Usage:', [
                    ['pokemon [options] [arguments]']
                ])
                ->columns('Options:', [
                    ['-a, --amount', 'The amount of Pokémon names that will generated']
                ], ['green']);
        }

        $amount = $options->get('-a', '--amount');

        $amount = !empty($amount) ? $amount : Input::number('[yellow]How many Pokémon names should be generated?[/yellow] [green](default: 1, max: 10)[/green]:')->setDefault(1)->get();

        if ($amount > 10) {
            $amount = 10;
        }

        $pokemon = [];

        for ($i = 0; $i < $amount; $i++) {
            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://pokeapi.co/api/v2/pokemon/" . rand(1, 898),
                CURLOPT_RETURNTRANSFER => true
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            $data = json_decode($response);

            $types = [];

            foreach ($data->types as $type) {
                $types[] = $type->type->name;
            }

            $pokemon[] = [$data->id, $data->name, implode(', ', $types)];
        }

        $output->columns('Pokémon:', $pokemon, ['dim', null, 'yellow']);
    })
    
    ->add('progress', function ($options, $output) {
        $progress = Progress::new()
            ->start();

        for($i = 0; $i <= 100; $i++) {
            usleep(rand(1000, 500000));
            $progress->set($i / 100);
        }
    })
    ->run();
